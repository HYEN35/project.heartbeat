<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="kr.heartbeat.mappers.community">
  	<select id="checkMemberShipLevel" resultType="kr.heartbeat.vo.UserVO" parameterType="kr.heartbeat.vo.UserVO">
  		select * from user_tbl where email = #{email}
  	</select>
  
  	<insert id="postWrite" parameterType="kr.heartbeat.vo.PostVO">
  		insert into post_tbl (email, artist_id, nickname, content, post_img, post_date)
  		value (#{email}, #{artist_id}, #{nickname}, #{content}, #{post_img}, now())
  	</insert>
  	
  	<select id="getPostList" resultType="kr.heartbeat.vo.PostVO" parameterType="kr.heartbeat.vo.PostVO">
  		select * from post_tbl  ORDER BY post_id DESC
  	</select>
  	<!-- 뉴진스 팬 게시물만 가져오기 -->
  	<select id="getFanPostList" parameterType="hashMap" resultType="kr.heartbeat.vo.PostVO">
  		SELECT *
	    FROM post_tbl
	    WHERE artist_id = 2
	    AND email not in (#{minji},#{haerin}) 
	    ORDER BY post_id DESC
    	LIMIT #{displayPost}, #{postNum};
  	</select>
  	
  	<!-- 뉴진스 팬 게시물 몇개인지 가져오기 -->
  	<select id="getFanPostCount" parameterType="hashMap" resultType="int">
	    SELECT COUNT(*)
	    FROM post_tbl
	    WHERE artist_id = 2
	    and email not in (#{minji},#{haerin})  
	    AND email IS NOT NULL;
	</select>
 	
  	<select id="getPost" resultType="kr.heartbeat.vo.PostVO" parameterType="kr.heartbeat.vo.PostVO">
  		select * from post_tbl where post_id = #{post_id} 
  	</select>	
  	
  	<update id="modifyPost" parameterType="kr.heartbeat.vo.PostVO">
  		update post_tbl set content = #{content} where post_id = #{post_id}
  	</update>
 
  	
  	<select id="deletePost">
  		delete from post_tbl where post_id = #{post_id}
  	</select>
  	
  		
  	<select id="getLevel" resultType="kr.heartbeat.vo.UserVO" parameterType="kr.heartbeat.vo.PostVO">
  		select * from user_tbl where email = #{email}
  	</select>
  	
  	<insert id="commentWrite" parameterType="kr.heartbeat.vo.CommentVO">
  		insert into comment_tbl (email, post_id, nickname, comment, comment_date)
  		value (#{email}, #{post_id}, #{nickname}, #{comment}, now())
  	</insert>
  	
  	<select id="getComment" parameterType="kr.heartbeat.vo.PostVO" resultType="kr.heartbeat.vo.CommentVO">
  		select * from comment_tbl where post_id = #{post_id} order by comment_id desc
  	</select>
  	
  	<select id="totalComment" parameterType="kr.heartbeat.vo.PostVO" resultType="int">
  		select count(*) from comment_tbl where post_id = #{post_id}
  	</select>
  	
  	<update id="modifyComment" parameterType="kr.heartbeat.vo.CommentVO">
  		UPDATE comment_tbl
		SET comment = #{comment}
		WHERE comment_id = #{comment_id}
  	</update>
  	
  	<select id="getmodifyComment" parameterType="kr.heartbeat.vo.CommentVO" resultType="kr.heartbeat.vo.CommentVO">
  		select * from comment_tbl where comment_id = #{comment_id}
  	</select>
  	
  	<delete id="commentdelete" parameterType="kr.heartbeat.vo.CommentVO">
  		delete from comment_tbl where comment_id = #{comment_id}
  	</delete>
  	
  	<select id="getNewComment" parameterType="kr.heartbeat.vo.CommentVO" resultType="kr.heartbeat.vo.CommentVO">
  		SELECT * from comment_tbl WHERE post_id = #{post_id} order by comment_id desc limit 1;
  	</select>
  	
  	<!-- 좋아요 눌렸는지 확인-->
  	<select id="likeToggle" parameterType="kr.heartbeat.vo.PostVO" resultType="int">
  		select count(*) from like_tbl where email = #{email} and post_id = #{post_id}
  	</select>
  	
  	<!-- 좋아요 -->
  	<insert id="addLike" parameterType="kr.heartbeat.vo.PostVO">
  		insert into like_tbl (email, post_id)
  		value (#{email}, #{post_id})
  	</insert>
  	<!-- 좋아요 취소 -->
  	<delete id="deleteLike" parameterType="kr.heartbeat.vo.PostVO">
  		delete from like_tbl where email = #{email} and post_id = #{post_id}
  	</delete>
  	
  	<!-- 좋아요 개수 가져오기-->
  	<select id="totalLike" parameterType="int" resultType="int">
  		select count(*) from like_tbl where post_id = #{post_id}
  	</select>
  	
  </mapper>